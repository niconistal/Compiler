%{
package Sintactic;
import java.util.StringTokenizer;
import Lexical.LexicalAnalizer;
import Lexical.Token;
import Lexical.ErrorHandler;
import Lexical.Error;
import Lexical.SymbolTable;
import java.util.ArrayList;
import utils.PathContainer;
import Lexical.SymbolElement;
import java.util.HashMap;
import java.util.HashSet;


%}

/* YACC Declarations */
%token VARTYPE
%token PRINT
%token ID
%token CTE
%token CHARCHAIN
%token FUNCTION
%token BEGIN
%token END
%token FOR
%token COMPARATOR
%token ERROR
%token IF
%token THEN
%token ELSE
%token ASSIGN
%token SEMICOLON
%token COMMA
%token OPENPAREN
%token CLOSEPAREN
%token PLUS
%token MINUS
%token PRODUCT
%token DIVISION
%token RETURN

%nonassoc IT
%nonassoc ELSE

%start start

/* Grammar follows */
%%
start :  {
	//initialize the Main intermediate code vector
	parserUtils.intermediateCode.put("MAIN", new ArrayList<String>());
} program ;
/* Program */
program:declarationList
		|declarationList executions
		|executions
		;

/* Declarations */

declarationList: declarationList declaration
	| declaration
	;

declaration: varDeclaration
	| functionDeclaration
	;
varDeclarationList: varDeclarationList varDeclaration
	| varDeclaration
	;
singleVarDeclaration: VARTYPE ID SEMICOLON {
		Error error;
		String varName = ((Token)$2.obj).getLiteralValue();
		String varNameWithContext = "";
		SymbolTable symbolTable = SymbolTable.getInstance();
		SymbolElement element = symbolTable.identify(varName);
		String literalTypeValue = ((Token)$1.obj).getLiteralValue();

		//clear prior defined variables
		parserUtils.variableList.clear();
		//update symbole table by applying name mangling
		varNameWithContext = parserUtils.context+"_"+varName;
		//check if variable was already declared
		if(symbolTable.contains(varNameWithContext)) {
			error = new Error(Error.TYPE_FATAL,"Variable redeclartion", parserUtils.lexical.getLine());
			parserUtils.errorHandler.addError(error);
		}
		symbolTable.remove(varName);
		symbolTable.addSymbol(varNameWithContext,element);

		element.setVarType(literalTypeValue);
		element.setUse("VAR");
		//return variable name
		$$=$2;
	};

varDeclaration: VARTYPE varList SEMICOLON {
		Error error;
		SymbolTable symbolTable = SymbolTable.getInstance();
		SymbolElement element = new SymbolElement();
		String varNameWithContext = "";
		String literalTypeValue = ((Token)$1.obj).getLiteralValue();

		//add type to each symbol table entryof the varList
		for(String varName : parserUtils.variableList) {
			element = symbolTable.identify(varName);
			//update symbole table by applying name mangling
			varNameWithContext = parserUtils.context+"_"+varName;
			//check if variable was already declared
			if(symbolTable.contains(varNameWithContext)) {
				error = new Error(Error.TYPE_FATAL,"Variable redeclartion", parserUtils.lexical.getLine());
				parserUtils.errorHandler.addError(error);
			}
			symbolTable.remove(varName);
			symbolTable.addSymbol(varNameWithContext,element);
			element.setVarType(literalTypeValue);
			element.setUse("VAR");
		}
		//clear prior defined variables
		parserUtils.variableList.clear();
	}
	| singleVarDeclaration
	;
varList: varList COMMA ID {
		//add variable name to a list that will be consulted later
		//to add type to each variable in the symbol table
		String varName = ((Token)$3.obj).getLiteralValue();
		parserUtils.variableList.add(varName);
	}
	| ID COMMA ID{
		String varName = ((Token)$1.obj).getLiteralValue();
		parserUtils.variableList.add(varName);
		varName = ((Token)$3.obj).getLiteralValue();
		parserUtils.variableList.add(varName);
	}
	;
functionHeader: FUNCTION ID OPENPAREN {
		//Set function name as the current context
		String functionName = ((Token)$2.obj).getLiteralValue();
		parserUtils.context = functionName;
	}  singleVarDeclaration CLOSEPAREN {
		Error error;
		SymbolElement element = new SymbolElement();
		String varNameWithContext = "";
		String varName = ((Token)$5.obj).getLiteralValue();
		SymbolTable symbolTable = SymbolTable.getInstance();
		String functionName = ((Token)$2.obj).getLiteralValue();
		ArrayList<String> currentIntCodeVector;
		//add FUNCTION use to the function identifier
		element = symbolTable.identify(functionName);
		element.setUse("FUNC");
		//check for function redeclaration
		if(symbolTable.contains(functionName)) {
			error = new Error(Error.TYPE_FATAL,"Function redeclartion", parserUtils.lexical.getLine());
			parserUtils.errorHandler.addError(error);
		}
		//initialize intermediate code vector
		parserUtils.intermediateCode.put(parserUtils.context.toUpperCase(), new ArrayList<String>());
		varNameWithContext = parserUtils.context+"_"+varName;
		element = symbolTable.identify(varNameWithContext);

		//set PARAMETER use to each identifier in the parameters declaration
		element.setUse("PARAM");
		parserUtils.variableList.clear();
		//default to 0 the return value
		currentIntCodeVector = parserUtils.intermediateCode.get(parserUtils.context.toUpperCase());
		currentIntCodeVector.add("rtn");
		currentIntCodeVector.add("0");
		currentIntCodeVector.add("=");

	};
functionDeclaration: functionHeader BEGIN varDeclarationList executionWReturnList END SEMICOLON {
		//once the function declaration is over, set the current context as main
		parserUtils.context = "main";
	}
	;


/* Executions */
executions: executions execution
	|execution
	;

executionWReturnList: executionWReturnList executionWReturn
	| executionWReturn
	;
executionWReturn: execution
	| ret

execution: print SEMICOLON
	| functionExecution SEMICOLON
	| iteration SEMICOLON
	| selection SEMICOLON
	| assign SEMICOLON
	;

ret: RETURN OPENPAREN {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		currentIntCodeVector.add("rtn");
	}expression CLOSEPAREN SEMICOLON {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		currentIntCodeVector.add("=");
		currentIntCodeVector.add("RET");
	}
	// | RETURN expression CLOSEPAREN SEMICOLON {
	// 	Error error = new Error(Error.TYPE_WARNING,"Missing left paretheses in return execution ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	// | RETURN OPENPAREN expression  SEMICOLON {
	// 	Error error = new Error(Error.TYPE_WARNING,"Missing right paretheses in return execution ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	;
print: PRINT OPENPAREN CHARCHAIN CLOSEPAREN {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		String message = ((Token)$3.obj).getLiteralValue();
		currentIntCodeVector.add(message);
		currentIntCodeVector.add("[PRINT]");
	}
	| PRINT CHARCHAIN CLOSEPAREN  {
		Error error = new Error(Error.TYPE_WARNING,"Missing left paretheses in print execution ", parserUtils.lexical.getLine());
		parserUtils.errorHandler.addError(error);
	}
	| PRINT OPENPAREN CHARCHAIN   {
		Error error = new Error(Error.TYPE_WARNING,"Missing right paretheses in print execution ", parserUtils.lexical.getLine());
		parserUtils.errorHandler.addError(error);
	}
	;

functionExecution: ID OPENPAREN ID CLOSEPAREN  {
		Error error;
		String parameterName = ((Token)$3.obj).getLiteralValue();
		String functionName = ((Token)$1.obj).getLiteralValue();
		String parameterNameWContext = parserUtils.context+"_"+parameterName;
		SymbolElement element = new SymbolElement();
		SymbolTable symbolTable = SymbolTable.getInstance();
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		//check if parameter is declared
		element = symbolTable.identify(parameterNameWContext);
		if(!(element != null && element.getUse() != "FUNC")) {
			error = new Error(Error.TYPE_FATAL,"Identifier "+parameterName+" not found.", parserUtils.lexical.getLine());
			parserUtils.errorHandler.addError(error);
		}
		//add function call to the intermediate code vector
		currentIntCodeVector.add(functionName);
		currentIntCodeVector.add("[CALL]");
		currentIntCodeVector.add("rtn");
	}
	| ID ID CLOSEPAREN SEMICOLON {
		Error error = new Error(Error.TYPE_WARNING,"Missing left paretheses in function execution ", parserUtils.lexical.getLine());
		parserUtils.errorHandler.addError(error);
	}
	| ID OPENPAREN ID SEMICOLON {
		Error error = new Error(Error.TYPE_WARNING,"Missing right paretheses in function execution ", parserUtils.lexical.getLine());
		parserUtils.errorHandler.addError(error);
	}
	;
iteration: FOR OPENPAREN assign SEMICOLON {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		String forConditionVar = ((Token)$3.obj).getLiteralValue();
		parserUtils.forConditionVar = forConditionVar;
		parserUtils.indexStack.add(currentIntCodeVector.size());
	}condition CLOSEPAREN declarationList {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());

		//save the index where the false bifurcation will be stored
		currentIntCodeVector.add("PLACEHOLDER");
		parserUtils.indexStack.add(currentIntCodeVector.size()-1);
		currentIntCodeVector.add("[BF]");
	}  executions {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		Integer falseBifurcationIndex = parserUtils.indexStack.remove(parserUtils.indexStack.size()-1);
		String forReevaluationIndex = parserUtils.indexStack.remove(parserUtils.indexStack.size()-1).toString();
		String falseBifurcationDirection;
		//increment the condition variable
		currentIntCodeVector.add(context+"_"+parserUtils.forConditionVar);
		currentIntCodeVector.add(context+"_"+parserUtils.forConditionVar);
		currentIntCodeVector.add("1");
		currentIntCodeVector.add("+");
		currentIntCodeVector.add("=");
		//Add inconditional jump to the FOR reevaluation index
		currentIntCodeVector.add(forReevaluationIndex);
		currentIntCodeVector.add("[JMP]");
		//Set the end of the FOR statement as the false bifurcation direction
		falseBifurcationDirection = Integer.toString(currentIntCodeVector.size());
		currentIntCodeVector.set(falseBifurcationIndex,falseBifurcationDirection);
	};
	//TODO uncomment fowolling rules when parsing conflicts are resolved

	// | FOR assign SEMICOLON condition CLOSEPAREN declarationList executions  {
	// 	Error error = new Error(Error.TYPE_WARNING,"Missing left paretheses in iteration execution  ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	// | FOR OPENPAREN assign SEMICOLON condition  declarationList executions  {
	// 	Error error = new Error(Error.TYPE_WARNING,"Missing right paretheses in iteration execution ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	;
selection: IF  OPENPAREN condition CLOSEPAREN THEN {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		//save the index where the false bifurcation will be stored
		currentIntCodeVector.add("PLACEHOLDER");
		parserUtils.indexStack.add(currentIntCodeVector.size()-1);
		currentIntCodeVector.add("[BF]");

	} block {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		String elseBlockDirection = Integer.toString(currentIntCodeVector.size()+2);
		Integer elseBlockIndex = parserUtils.indexStack.remove(parserUtils.indexStack.size()-1);
		currentIntCodeVector.set(elseBlockIndex,elseBlockDirection);
		//save the index where the end of else block will be stored
		currentIntCodeVector.add("PLACEHOLDER");
		parserUtils.indexStack.add(currentIntCodeVector.size()-1);
		currentIntCodeVector.add("[JMP]");
	} ELSE block {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		String endBlockDirection = Integer.toString(currentIntCodeVector.size());
		Integer endBlockIndex = parserUtils.indexStack.remove(parserUtils.indexStack.size()-1);
		currentIntCodeVector.set(endBlockIndex,endBlockDirection);
	}


	//TODO uncomment these lines when parsing conflicts are resolved

	// | IF  condition CLOSEPAREN THEN block  ELSE  block  {
	// 	Error error = new Error(Error.TYPE_WARNING,"Missing left paretheses in IF statement  ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	// | IF  OPENPAREN condition  THEN block  ELSE  block  {
	// 	Error error = new Error(Error.TYPE_WARNING,"Missing right paretheses in IF statement  ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	// | IF  OPENPAREN condition   block  ELSE  block  {
	// 	Error error = new Error(Error.TYPE_FATAL,"Missing THEN in IF statement  ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	// | IF OPENPAREN condition CLOSEPAREN THEN block %prec IT
	// | IF  condition CLOSEPAREN THEN block %prec IT  {
	// 	Error error = new Error(Error.TYPE_WARNING,"Missing left paretheses in IF statement  ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	// | IF OPENPAREN condition  THEN block %prec IT  {
	// 	Error error = new Error(Error.TYPE_WARNING,"Missing right paretheses in IF statement  ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	// | IF OPENPAREN condition CLOSEPAREN  block %prec IT  {
	// 	Error error = new Error(Error.TYPE_FATAL,"Missing THEN in IF statement  ", parserUtils.lexical.getLine());
	// 	parserUtils.errorHandler.addError(error);
	// }
	;
condition: expression COMPARATOR expression {
		String comparatorSymbol = ((Token)$2.obj).getLiteralValue();
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		currentIntCodeVector.add(comparatorSymbol);
	};

block: BEGIN declarationList executions END
	| BEGIN declarationList declaration END
	| declarationList declaration END {
		Error error = new Error(Error.TYPE_FATAL,"Missing BEGIN in block  ", parserUtils.lexical.getLine());
		parserUtils.errorHandler.addError(error);
	}
	| BEGIN declarationList declaration  {
		Error error = new Error(Error.TYPE_FATAL,"Missing END in block  ", parserUtils.lexical.getLine());
		parserUtils.errorHandler.addError(error);
	}
	| BEGIN executions execution END
	| executions execution END {
		Error error = new Error(Error.TYPE_FATAL,"Missing BEGIN in block  ", parserUtils.lexical.getLine());
		parserUtils.errorHandler.addError(error);
	}
	| BEGIN executions execution {
		Error error = new Error(Error.TYPE_FATAL,"Missing END in block  ", parserUtils.lexical.getLine());
		parserUtils.errorHandler.addError(error);
	}
	| BEGIN END
	| declaration
	| execution
	;
assign: ID ASSIGN {
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		String varName = ((Token)$1.obj).getLiteralValue();
		currentIntCodeVector.add(context+"_"+varName);
	}expression  {
		Error error;
		String varName = ((Token)$1.obj).getLiteralValue();
		String assignSymbol = ((Token)$2.obj).getLiteralValue();
		String context = parserUtils.context;
		String parameterNameWContext;
		SymbolElement element = new SymbolElement();
		SymbolTable symbolTable = SymbolTable.getInstance();
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		HashSet<String> contextList = new HashSet<String>();
		boolean found = false;
		contextList.add(context);
		contextList.add("MAIN");
		//check if identifier is declared
		for(String cont: contextList) {
			parameterNameWContext= cont+"_"+varName;
			element = symbolTable.identify(parameterNameWContext);
			if(element != null && element.getUse() != "FUNC") {
				found = true;
				break;
			}
		}
		if(!found) {
			error = new Error(Error.TYPE_FATAL,"Identifier "+varName+" not found.", parserUtils.lexical.getLine());
			parserUtils.errorHandler.addError(error);
		} else {
			currentIntCodeVector.add(assignSymbol);
		}
	};
expression: expression PLUS term {
		String symbol = ((Token)$2.obj).getLiteralValue();
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		currentIntCodeVector.add(symbol);
	}
	| expression MINUS term {
		String symbol = ((Token)$2.obj).getLiteralValue();
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		currentIntCodeVector.add(symbol);
	}
	| term
	;

term: term PRODUCT factor {
		String symbol = ((Token)$2.obj).getLiteralValue();
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		currentIntCodeVector.add(symbol);
	}
	| term DIVISION factor {
		String symbol = ((Token)$2.obj).getLiteralValue();
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		currentIntCodeVector.add(symbol);
	}
	| factor
	;

factor: CTE {
		String varName = ((Token)$1.obj).getLiteralValue();
		String context = parserUtils.context;
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		SymbolTable symbolTable = SymbolTable.getInstance();
		SymbolElement element = new SymbolElement();

		element = symbolTable.identify(varName);
		//The only allowed type for constants is ULONG
		element.setVarType("ULONG");
		currentIntCodeVector.add(varName);
	}
	| ID {
		Error error;
		String varName = ((Token)$1.obj).getLiteralValue();
		String context = parserUtils.context;
		HashSet<String> contextList = new HashSet<String>();
		SymbolElement element = new SymbolElement();
		SymbolTable symbolTable = SymbolTable.getInstance();
		ArrayList<String> currentIntCodeVector = parserUtils.intermediateCode.get(context.toUpperCase());
		String parameterNameWContext;
		boolean found = false;
		contextList.add(context);
		contextList.add("MAIN");
		for(String cont: contextList) {
			parameterNameWContext= cont+"_"+varName;
			element = symbolTable.identify(parameterNameWContext);
			if(element != null && element.getUse() != "FUNC") {
				found = true;
				break;
			}
		}
		//check if parameter is declared
		if(!found) {
			error = new Error(Error.TYPE_FATAL,"Identifier "+varName+" not found.", parserUtils.lexical.getLine());
			parserUtils.errorHandler.addError(error);
		} else {
			currentIntCodeVector.add(parserUtils.context+"_"+varName);
		}
	}
	| functionExecution
	;

%%

String ins;
StringTokenizer st;

void yyerror(String s) {
 System.out.println("par:"+s);
}

boolean newline;

public class ParserUtils {
	ArrayList<String> variableList = new ArrayList<String>();
	//there will be one reverse polish vector for each function, and one for the main. Each vector
	//will be able to be accessed by the context name
	public HashMap<String,ArrayList<String>> intermediateCode = new HashMap<String,ArrayList<String>>();
	ErrorHandler errorHandler = ErrorHandler.getInstance();
	LexicalAnalizer lexical = new LexicalAnalizer(PathContainer.getPath());
	String context = "main";
	//variable to handle the intermediate code generation of the FOR loop
	String forConditionVar;
	//a stack to handle index handling in IF and FOR statements
	ArrayList<Integer> indexStack = new ArrayList<Integer>();
}

public ParserUtils parserUtils = new ParserUtils();

int yylex() {
	Token token = parserUtils.lexical.getToken();
	yylval = new ParserVal(token);

	switch(token.getTokenValue()) {
		case "ID":
			return Parser.ID;
		case "CTE" :
			return Parser.CTE;
		case "CHARCHAIN" :
			return Parser.CHARCHAIN;
		case "ULONG" :
			return Parser.VARTYPE;
		case "RETURN" :
			return Parser.RETURN;
		case ">" :
			return Parser.COMPARATOR;
		case ">=" :
			return Parser.COMPARATOR;
		case "<" :
			return Parser.COMPARATOR;
		case "<=" :
			return Parser.COMPARATOR;
		case "==" :
			return Parser.COMPARATOR;
		case "!=" :
			return Parser.COMPARATOR;
		case "=" :
			return Parser.ASSIGN;
		case ";" :
			return Parser.SEMICOLON;
		case "," :
			return Parser.COMMA;
		case "(" :
			return Parser.OPENPAREN;
		case ")" :
			return Parser.CLOSEPAREN;
		case "+" :
			return Parser.PLUS;
		case "-" :
			return Parser.MINUS;
		case "*" :
			return Parser.PRODUCT;
		case "/" :
			return Parser.DIVISION;
		case  "PRINT":
			return Parser.PRINT;
		case  "FUNCTION":
			return Parser.FUNCTION;
		case  "BEGIN" :
			return Parser.BEGIN;
		case  "END":
			return Parser.END;
		case  "FOR":
			return Parser.FOR;
		case  "IF":
			return Parser.IF;
		case  "THEN":
			return Parser.THEN;
		case  "ELSE":
			return Parser.ELSE;
		case  "#":
			return -1;
	}
	return -1;
}
